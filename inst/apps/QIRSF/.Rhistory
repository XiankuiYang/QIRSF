Main_area=as.factor(rep(1,5))),re.form= NA)
ytime1
ytime2 = predict(fit.1,data.frame(SiteID = rep("E10017",5),zipcode = rep("98004",5),County = as.factor(rep(1,5)),
EmplTotal= rep(log(mean(na.omit(Employer_data1$EmplTotal))),5),
ETC_time =  rep(mean(na.omit(Employer_data1$ETC_time)),5),
time = xtime,
Promote_info = rep(mean(na.omit(Employer_data1$Promote_info)),5),
Types_comp = as.factor(rep(1,5)),
Transit_station = as.factor(rep(1,5)),
Sidewalks = as.factor(rep(1,5)),
Amenity = as.factor(rep(1,5)),
Pubtrans_subsidy.1 =  as.factor(rep(2,5)),
Carsharing_subsidy.1 =  as.factor(rep(2,5)),
Bikewalk_subsidy.1 =  as.factor(rep(2,5)),
Compressed_work = as.factor(rep(1,5)),
Flex_time = as.factor(rep(1,5)),
Telework = as.factor(rep(1,5)),
Ride_match = as.factor(rep(1,5)),
Gas_price = rep(mean(na.omit(Employer_data1$Gas_price)),5),
job_density1 = rep(log(mean(na.omit(Employer_data1$job_density1))+1),5),
Main_area=as.factor(rep(1,5))),re.form= NA)
ytime2
presult = data.frame(rep(xtime,3),c(ytime,ytime1,ytime2),factor(c(rep("No subsidy",5),rep("Small subsidy",5),rep("Large subsidy",5)),
levels = c("No subsidy","Small subsidy","Large subsidy")))
names(presult) = c("Time","VTR","Group")
p = ggplot(presult,aes(x = Time,y =VTR,group = Group ))
p + geom_point(aes(color = Group),size = 2)+
geom_line(aes(linetype = Group,color = Group),size = 1)+
ylim(35,75)+
scale_x_continuous(breaks=c(1:9), labels = c("01-02","03-04","05-06","07-08","09-10","11-12","13-14","15-16","17-18"))+
labs(title = "Fitted values by bike/walk subsidy")+ theme_bw() +
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(values = c("gray50","blue1","red1"))+
scale_linetype_manual(values = c(1,2,3))+
theme(legend.position = c(0.99,0.99),legend.justification = c(0.99,0.99))
presult = data.frame(rep(xtime,3),c(ytime,ytime1,ytime2),factor(c(rep("No subsidy",5),rep("Small subsidy",5),rep("Large subsidy",5)),
levels = c("No subsidy","Small subsidy","Large subsidy")))
names(presult) = c("Time","VTR","Group")
p = ggplot(presult,aes(x = Time,y =VTR,group = Group ))
p + geom_point(aes(color = Group),size = 2)+
geom_line(aes(linetype = Group,color = Group),size = 1)+
ylim(35,85)+
scale_x_continuous(breaks=c(1:9), labels = c("01-02","03-04","05-06","07-08","09-10","11-12","13-14","15-16","17-18"))+
labs(title = "Fitted values by bike/walk subsidy")+ theme_bw() +
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(values = c("gray50","blue1","red1"))+
scale_linetype_manual(values = c(1,2,3))+
theme(legend.position = c(0.99,0.99),legend.justification = c(0.99,0.99))
ytime5 = predict(fit.1,data.frame(SiteID = rep("E10017",5),zipcode = rep("98004",5),County = as.factor(rep(1,5)),
EmplTotal= rep(log(mean(na.omit(Employer_data1$EmplTotal))),5),
ETC_time =  rep(mean(na.omit(Employer_data1$ETC_time)),5),
time = xtime,
Promote_info = rep(mean(na.omit(Employer_data1$Promote_info)),5),
Types_comp = as.factor(rep(1,5)),
Transit_station = as.factor(rep(1,5)),
Sidewalks = as.factor(rep(1,5)),
Amenity = as.factor(rep(1,5)),
Pubtrans_subsidy.1 =  as.factor(rep(2,5)),
Carsharing_subsidy.1 =  as.factor(rep(2,5)),
Bikewalk_subsidy.1 =  as.factor(rep(2,5)),
Compressed_work = as.factor(rep(1,5)),
Flex_time = as.factor(rep(1,5)),
Telework = as.factor(rep(1,5)),
Ride_match = as.factor(rep(1,5)),
Gas_price = gasprice,
job_density1 = rep(log(mean(na.omit(Employer_data1$job_density1))+1),5),
Main_area=as.factor(rep(1,5))),re.form= NA)
gasprice = unique(Employer_data1$Gas_price)
ytime5 = predict(fit.1,data.frame(SiteID = rep("E10017",5),zipcode = rep("98004",5),County = as.factor(rep(1,5)),
EmplTotal= rep(log(mean(na.omit(Employer_data1$EmplTotal))),5),
ETC_time =  rep(mean(na.omit(Employer_data1$ETC_time)),5),
time = xtime,
Promote_info = rep(mean(na.omit(Employer_data1$Promote_info)),5),
Types_comp = as.factor(rep(1,5)),
Transit_station = as.factor(rep(1,5)),
Sidewalks = as.factor(rep(1,5)),
Amenity = as.factor(rep(1,5)),
Pubtrans_subsidy.1 =  as.factor(rep(2,5)),
Carsharing_subsidy.1 =  as.factor(rep(2,5)),
Bikewalk_subsidy.1 =  as.factor(rep(2,5)),
Compressed_work = as.factor(rep(1,5)),
Flex_time = as.factor(rep(1,5)),
Telework = as.factor(rep(1,5)),
Ride_match = as.factor(rep(1,5)),
Gas_price = gasprice,
job_density1 = rep(log(mean(na.omit(Employer_data1$job_density1))+1),5),
Main_area=as.factor(rep(1,5))),re.form= NA)
ytime5
gasprice1 =round(gasprice,2)
presult1 = data.frame(xtime,ytime5)
names(presult1) = c("Time","VTR")
p = ggplot(presult1,aes(x = Time,y =VTR))
p + geom_point(color = "gray50",size = 2)+
geom_line(color = "gray50",size = 1)+
ylim(40,70)+
scale_x_continuous(breaks=c(1:9), labels = c("01-02","03-04","05-06","07-08","09-10","11-12","13-14","15-16","17-18"))+
labs(title = "Fitted values for gas prices")+ theme_bw() +
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text", x=1.05, y=51+2.8, label=gasprice1[1], colour = "black")+
annotate("text", x=2, y=51.5+2.8, label=gasprice1[2], colour = "black")+
annotate("text", x=3, y=51+2.8, label=gasprice1[3], colour = "black")+
annotate("text", x=8, y=57.8+3.1, label=gasprice1[4], colour = "black")+
annotate("text", x=9, y=58+3.1, label=gasprice1[5], colour = "black")
p + geom_point(color = "gray50",size = 2)+
geom_line(color = "gray50",size = 1)+
ylim(40,70)+
scale_x_continuous(breaks=c(1:9), labels = c("01-02","03-04","05-06","07-08","09-10","11-12","13-14","15-16","17-18"))+
labs(title = "Fitted values for gas prices")+ theme_bw() +
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text", x=1.05, y=43, label=gasprice1[1], colour = "black")+
annotate("text", x=2, y=44, label=gasprice1[2], colour = "black")+
annotate("text", x=3, y=43.5, label=gasprice1[3], colour = "black")+
annotate("text", x=8, y=56, label=gasprice1[4], colour = "black")+
annotate("text", x=9, y=57.1, label=gasprice1[5], colour = "black")
p + geom_point(color = "gray50",size = 2)+
geom_line(color = "gray50",size = 1)+
ylim(40,65)+
scale_x_continuous(breaks=c(1:9), labels = c("01-02","03-04","05-06","07-08","09-10","11-12","13-14","15-16","17-18"))+
labs(title = "Fitted values for gas prices")+ theme_bw() +
theme(panel.grid.major=element_line(colour=NA),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text", x=1.05, y=43, label=gasprice1[1], colour = "black")+
annotate("text", x=2, y=44, label=gasprice1[2], colour = "black")+
annotate("text", x=3, y=43.5, label=gasprice1[3], colour = "black")+
annotate("text", x=8, y=56, label=gasprice1[4], colour = "black")+
annotate("text", x=9, y=57.1, label=gasprice1[5], colour = "black")
Employer_data1 = read.csv("D:/RA/Data analysis/New analysis for employer/Arranged employer data 4.csv",header = T)
Company_Geoid = read.csv("D:\\RA\\Data analysis\\New analysis for employer\\CTR\\546_Inc_codes.csv")
Employer_data1$area = rep(NA,1105)
for (i in 1:546) {
a = which(Employer_data1$SiteID==Company_Geoid$SiteID[i])
if (length(a) > 1){
Employer_data1$area[a] = Company_Geoid$tract_area[i]
}
}
Employer_data1$job_density1 = Employer_data1$job_density/Employer_data1$area
Employer_data1$Pubtrans_subsidy[which(Employer_data1$Ave_Pubtrans_subsidy>0)]=1
Employer_data1$Carsharing_subsidy[which(Employer_data1$Ave_Carsharing_subsidy>0)]=1
Employer_data1$Bikewalk_subsidy[which(Employer_data1$Ave_Bikewalk_subsidy>0)]=1
boxplot(Employer_data1$EmplTotal~Employer_data1$time,main = "", xlab = "", ylab = "Size (# of employees)",pch = 16,col =c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose"),ylim = c(0,4000))
boxplot(Employer_data1$ETC_time~Employer_data1$time,main = "", xlab = "", ylab = "ETC worktime",pch = 16,col =c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose"))
boxplot(Employer_data1$VTR~Employer_data1$time,main = "", xlab = "", ylab = "VTR",pch = 16,col =c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose"))
boxplot(Employer_data1$Promote_info~Employer_data1$time,main = "", xlab = "", ylab = "Promoting efforts",pch = 16,col =c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose"))
boxplot(Employer_data1$job_density1~Employer_data1$time,main = "", xlab = "", ylab = "Job density",pch = 16,col = c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose")
,ylim = c(0,1000) )
boxplot(Employer_data1$Ave_Bikewalk_subsidy~Employer_data1$time,main = "", xlab = "", ylab = "Bike/walk subsidy",pch = 16,col =c("lightblue","darkolivegreen1","khaki1","lightgray","mistyrose"))
rbind(prop.table(table(Employer_data1$Transit_station[Employer_data1$time==1])),
prop.table(table(Employer_data1$Transit_station[Employer_data1$time==2])),
prop.table(table(Employer_data1$Transit_station[Employer_data1$time==3])),
prop.table(table(Employer_data1$Transit_station[Employer_data1$time==8])),
prop.table(table(Employer_data1$Transit_station[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Sidewalks[Employer_data1$time==1])),
prop.table(table(Employer_data1$Sidewalks[Employer_data1$time==2])),
prop.table(table(Employer_data1$Sidewalks[Employer_data1$time==3])),
prop.table(table(Employer_data1$Sidewalks[Employer_data1$time==8])),
prop.table(table(Employer_data1$Sidewalks[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Amenity[Employer_data1$time==1])),
prop.table(table(Employer_data1$Amenity[Employer_data1$time==2])),
prop.table(table(Employer_data1$Amenity[Employer_data1$time==3])),
prop.table(table(Employer_data1$Amenity[Employer_data1$time==8])),
prop.table(table(Employer_data1$Amenity[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Ride_match[Employer_data1$time==1])),
prop.table(table(Employer_data1$Ride_match[Employer_data1$time==2])),
prop.table(table(Employer_data1$Ride_match[Employer_data1$time==3])),
prop.table(table(Employer_data1$Ride_match[Employer_data1$time==8])),
prop.table(table(Employer_data1$Ride_match[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Compressed_work[Employer_data1$time==1])),
prop.table(table(Employer_data1$Compressed_work[Employer_data1$time==2])),
prop.table(table(Employer_data1$Compressed_work[Employer_data1$time==3])),
prop.table(table(Employer_data1$Compressed_work[Employer_data1$time==8])),
prop.table(table(Employer_data1$Compressed_work[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Flex_time[Employer_data1$time==1])),
prop.table(table(Employer_data1$Flex_time[Employer_data1$time==2])),
prop.table(table(Employer_data1$Flex_time[Employer_data1$time==3])),
prop.table(table(Employer_data1$Flex_time[Employer_data1$time==8])),
prop.table(table(Employer_data1$Flex_time[Employer_data1$time==9])))
rbind(prop.table(table(Employer_data1$Telework[Employer_data1$time==1])),
prop.table(table(Employer_data1$Telework[Employer_data1$time==2])),
prop.table(table(Employer_data1$Telework[Employer_data1$time==3])),
prop.table(table(Employer_data1$Telework[Employer_data1$time==8])),
prop.table(table(Employer_data1$Telework[Employer_data1$time==9])))
Employer_data1$Ride_match[Employer_data1$Ride_match==-1]=NA
Employer_data1$Types_comp[Employer_data1$Types_comp==0]=3
Employer_data1$Collect_bargain = as.factor(Employer_data1$Collect_bargain)
Employer_data1$Types_comp = as.factor(Employer_data1$Types_comp)
Employer_data1$Gov_nprft = as.factor(Employer_data1$Gov_nprft)
Employer_data1$Transit_station =as.factor(Employer_data1$Transit_station)
Employer_data1$Sidewalks = as.factor(Employer_data1$Sidewalks)
Employer_data1$Amenity = as.factor(Employer_data1$Amenity)
Employer_data1$Parking = as.factor(Employer_data1$Parking)
Employer_data1$Transitpass = as.factor(Employer_data1$Transitpass)
Employer_data1$Pubtrans_subsidy = as.factor(Employer_data1$Pubtrans_subsidy)
Employer_data1$Carsharing_subsidy = as.factor(Employer_data1$Carsharing_subsidy)
Employer_data1$Tax_cridet = as.factor(Employer_data1$Tax_cridet)
Employer_data1$Bikewalk_subsidy = as.factor(Employer_data1$Bikewalk_subsidy)
Employer_data1$Compressed_work = as.factor(Employer_data1$Compressed_work)
Employer_data1$Flex_time = as.factor(Employer_data1$Flex_time)
Employer_data1$Telework = as.factor(Employer_data1$Telework)
Employer_data1$Vehicle_provide = as.factor(Employer_data1$Vehicle_provide)
Employer_data1$Short_dist_service = as.factor(Employer_data1$Short_dist_service)
Employer_data1$Emergency_ride = as.factor(Employer_data1$Emergency_ride)
Employer_data1$Ride_match = as.factor(Employer_data1$Ride_match)
Employer_data1$Rental_car = as.factor(Employer_data1$Rental_car)
Employer_data1$County = as.factor(Employer_data1$County)
Employer_data1$Gas_price[which(Employer_data1$time == "01--02")] = Employer_data1$Gas_price[which(Employer_data1$time == "01--02")]/102.85*100
Employer_data1$Gas_price[which(Employer_data1$time == "03--04")] = Employer_data1$Gas_price[which(Employer_data1$time == "03--04")]/106.85*100
Employer_data1$Gas_price[which(Employer_data1$time == "05--06")] = Employer_data1$Gas_price[which(Employer_data1$time == "05--06")]/113.41*100
Employer_data1$Gas_price[which(Employer_data1$time == "15--16")] = Employer_data1$Gas_price[which(Employer_data1$time == "15--16")]/137.64*100
Employer_data1$Gas_price[which(Employer_data1$time == "17--18")] = Employer_data1$Gas_price[which(Employer_data1$time == "17--18")]/142.35*100
Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "01--02")] = Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "01--02")]/102.85*100
Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "03--04")] = Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "03--04")]/106.85*100
Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "05--06")] = Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "05--06")]/113.41*100
Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "15--16")] = Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "15--16")]/137.64*100
Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "17--18")] = Employer_data1$Ave_Pubtrans_subsidy[which(Employer_data1$time == "17--18")]/142.35*100
Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "01--02")] = Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "01--02")]/102.85*100
Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "03--04")] = Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "03--04")]/106.85*100
Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "05--06")] = Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "05--06")]/113.41*100
Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "15--16")] = Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "15--16")]/137.64*100
Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "17--18")] = Employer_data1$Ave_Carsharing_subsidy[which(Employer_data1$time == "17--18")]/142.35*100
Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "01--02")] = Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "01--02")]/102.85*100
Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "03--04")] = Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "03--04")]/106.85*100
Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "05--06")] = Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "05--06")]/113.41*100
Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "15--16")] = Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "15--16")]/137.64*100
Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "17--18")] = Employer_data1$Ave_Bikewalk_subsidy[which(Employer_data1$time == "17--18")]/142.35*100
Employer_data1$Ave_Transitpass[which(Employer_data1$time == "15--16")] = Employer_data1$Ave_Transitpass[which(Employer_data1$time == "15--16")]/137.64*100
Employer_data1$Ave_Transitpass[which(Employer_data1$time == "17--18")] = Employer_data1$Ave_Transitpass[which(Employer_data1$time == "17--18")]/142.35*100
### Good access to Amenities or Poor access to Amenities
Employer_data1$time[which(Employer_data1$time == "01--02")] = 1
Employer_data1$time[which(Employer_data1$time == "03--04")] = 2
Employer_data1$time[which(Employer_data1$time == "05--06")] = 3
Employer_data1$time[which(Employer_data1$time == "07--08")] = 4
Employer_data1$time[which(Employer_data1$time == "09--10")] = 5
Employer_data1$time[which(Employer_data1$time == "11--12")] = 6
Employer_data1$time[which(Employer_data1$time == "13--14")] = 7
Employer_data1$time[which(Employer_data1$time == "15--16")] = 8
Employer_data1$time[which(Employer_data1$time == "17--18")] = 9
# Downtown Bellevue 98004 98005 98006 90007 98008
downtown = read.csv("D:/RA/Data analysis/New analysis for employer/CTR/Downtown seattle/downtown seattle.csv",header = T)
downtown = read.csv("D:/RA/Data analysis/New analysis for employer/CTR/Downtown seattle/downtown.csv",header = T)
downtown$SiteID = as.character(downtown$SiteID)
Main_area = rep(NA,length(Employer_data1$SiteID))
for (i in 1:546) {
judge = c(which(Employer_data1$SiteID==downtown$SiteID[i]))
if (length(judge)!=0){
Main_area[judge] = downtown$Downtown[i]
}
}
Main_area = rep(NA,length(Employer_data1$SiteID))
for (i in 1:546) {
judge = c(which(Employer_data1$SiteID==downtown$SiteID[i]))
if (length(judge)!=0){
Main_area[judge] = downtown$Mainarea[i]
}
}
Employer_data1 = cbind(Employer_data1,Main_area)
Employer_data1$County = as.factor(Employer_data1$County )
# cor(Employer_data1$County,Employer_data1$Main_area)
Employer_data1$time = as.numeric(Employer_data1$time)
Employer_data1$zipcode = as.factor(Employer_data1$zipcode)
Employer_data1$Main_area = as.factor(Employer_data1$Main_area)
# infaltion
# 01-02 102.85
# 03-04 106.85
# 05-06 113.41
# 15-16 137.64
# 17-18 142.35
Employer_data1$job_density2 = log(Employer_data1$job_density1+1)
Employer_data1$EmplTotal1 = log(Employer_data1$EmplTotal)
library(mgcv)
library(car)
library(glmm)
library(lmerTest)
library(lme4)
Employer_data1$time = as.numeric(Employer_data1$time)
table(Employer_data1$Ave_Pubtrans_subsidy )
summary(Employer_data1$Ave_Pubtrans_subsidy)
sd(na.omit(Employer_data1$Ave_Pubtrans_subsidy))
summary(Employer_data1$Ave_Carsharing_subsidy)
sd(na.omit(Employer_data1$Ave_Carsharing_subsidy))
summary(Employer_data1$Ave_Bikewalk_subsidy)
sd(na.omit(Employer_data1$Ave_Bikewalk_subsidy))
2.375+5.852638
2.5528+6.964245
0.6631+3.070129
Employer_data1$Pubtrans_subsidy.1 = NA
Employer_data1$Carsharing_subsidy.1 = NA
Employer_data1$Bikewalk_subsidy.1 = NA
# library(psych)
#
# describe(log(Employer_data1$job_density+1))
#
# describe(log(Employer_data1$EmplTotal))
Employer_data1$Pubtrans_subsidy.1[which(Employer_data1$Ave_Pubtrans_subsidy>8.227638)]=2
Employer_data1$Pubtrans_subsidy.1[which(Employer_data1$Ave_Pubtrans_subsidy<=8.227638&
Employer_data1$Ave_Pubtrans_subsidy>0)]=1
Employer_data1$Pubtrans_subsidy.1[which(Employer_data1$Ave_Pubtrans_subsidy==0)]=0
Employer_data1$Carsharing_subsidy.1[which(Employer_data1$Ave_Carsharing_subsidy>9.517045)]=2
Employer_data1$Carsharing_subsidy.1[which(Employer_data1$Ave_Carsharing_subsidy<=9.517045&
Employer_data1$Ave_Carsharing_subsidy>0)]=1
Employer_data1$Carsharing_subsidy.1[which(Employer_data1$Ave_Carsharing_subsidy==0)]=0
Employer_data1$Bikewalk_subsidy.1[which(Employer_data1$Ave_Bikewalk_subsidy>3.733229)]=2
Employer_data1$Bikewalk_subsidy.1[which(Employer_data1$Ave_Bikewalk_subsidy>0&
Employer_data1$Ave_Bikewalk_subsidy<=3.733229)]=1
Employer_data1$Bikewalk_subsidy.1[which(Employer_data1$Ave_Bikewalk_subsidy==0)]=0
Employer_data1$Pubtrans_subsidy.1 = as.factor(Employer_data1$Pubtrans_subsidy.1)
Employer_data1$Carsharing_subsidy.1 = as.factor(Employer_data1$Carsharing_subsidy.1)
Employer_data1$Bikewalk_subsidy.1 = as.factor(Employer_data1$Bikewalk_subsidy.1)
data2 = Employer_data1[which(Employer_data1$time==8|Employer_data1$time==9),]
data2$Transitpass.1 = NA
summary(data2$Ave_Transitpass)
sd(na.omit(data2$Ave_Transitpass))
39.7169+63.93612
data2$Transitpass.1[data2$Ave_Transitpass>103.653]=2
data2$Transitpass.1[data2$Ave_Transitpass<=103.653&
data2$Ave_Transitpass>0]=1
data2$Transitpass.1[data2$Ave_Transitpass==0]=0
data2$Transitpass.1 = as.factor(data2$Transitpass.1)
prop.table(table(data2$Transitpass.1))
library(doParallel)
library(foreach)
wt = seq(0,1,by = 1/50)
iterations <- length(wt)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
library(shiny); runApp('D:/Ph.D. preparing/First project - Space filling design/IRSF with clustering method/APP/IRSF clustering.R')
A = read.csv("D:\\Ph.D. preparing\\First project - Space filling design\\FFF\\Cluster APP\\Shiny app test\\Regression model candidate.csv",
header = T)
xmat.r = as.matrix(A[,1:2],ncol=2)
ymat.cand.est.full = as.matrix(A[,3:3],ncol=1)
xmat.r = as.matrix(A[,1:2],ncol=2)
ymat.cand.est.full = as.matrix(A[,3:3],ncol=1)
Ns0.ex1 = 10
wt = seq(0,1,by = 1/50)
iterations <- length(wt)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
CriterionA <- foreach(varid = 1:iterations, .combine = rbind, .packages = c('dplyr','tidyr')) %dopar%
{
unitscale <- function(raw.mat,cand.mat=NULL)
{
raw.mat = as.matrix(raw.mat)
p <- dim(raw.mat)[2]
raw.mat.new <- raw.mat
if(is.null(cand.mat))
{
cand.mat=raw.mat
}
cand.mat = as.matrix(cand.mat)
for(i in 1:p)
{
raw.mat.new[,i] <- (raw.mat[,i]-min(cand.mat[,i]))/(max(cand.mat[,i])-min(cand.mat[,i]))
}
return(raw.mat.new)
}
irsf.cluster <- function(xmat,ymat,N,wt,Method) {
library(fastcluster, quietly = T)
Nd <- N
wt <- wt
nxq <- dim(xmat)[1]
nxp <- dim(xmat)[2]
nyp <- dim(ymat)[2]
xmat.r <- xmat
ymat.r <- ymat
xmat.r.1 <- unitscale(xmat.r)
ymat.r.1 <- unitscale(ymat.r)
randmat.x <- as.matrix(xmat.r.1[,1:(nxp)])
randmat.y <- as.matrix(ymat.r.1[,1:(nyp)])
dx = stats::dist(randmat.x, method = "euclidean")
dy = stats::dist(randmat.y, method = "euclidean")
xmax = max(dx)
xmin = min(dx)
ymax = max(dy)
ymin = min(dy)
d1 = (dx-xmin)/(xmax-xmin)
d2 = (dy-ymin)/(ymax-ymin)
dc = wt*d1+(1-wt)*d2
if (Method == "complete") {
groupid <- stats::cutree(stats::hclust(d = dc, method = "complete"), k = Nd)
}
if (Method == "average"){
groupid <- stats::cutree(stats::hclust(d = dc, method = "average"), k = Nd)
}
if (Method == "mcquitty"){
groupid <- stats::cutree(stats::hclust(d = dc, method = "mcquitty"), k = Nd)
}
outmat.x <- matrix(0,nrow = Nd,ncol = nxp)
outmat.y <- matrix(0,nrow = Nd,ncol = nyp)
for (j in 1:Nd) {
cluster.x = as.matrix(randmat.x[which(groupid == j),])
cluster.y = as.matrix(randmat.y[which(groupid == j),])
cluster.x.original = as.matrix(xmat.r[which(groupid == j),])
cluster.y.original = as.matrix(ymat.r[which(groupid == j),])
nd = dim(cluster.y)[1]
np = dim(cluster.x)[2]
nq = dim(cluster.y)[2]
cluster1 = cbind(cluster.x,cluster.y)
Dist.mat = apply(cluster1, 1, function(P1){
max(wt*((sqrt(rowSums((cluster.x-matrix(rep(P1[1:np],nd),ncol=np,byrow = T))^2))-xmin)/(xmax-xmin))+
(1-wt)*((sqrt(rowSums((cluster.y-matrix(rep(P1[(np+1):(np+nq)],nd),ncol=nq,byrow = T))^2))-ymin)/(ymax-ymin)))
})
Minimax.point = which(Dist.mat==min(Dist.mat))
if (length(Minimax.point)>1) {
Minimax.point = sample(Minimax.point,1)
}
outmat.x[j,] = cluster.x.original[Minimax.point,]
outmat.y[j,] = cluster.y.original[Minimax.point,]
}
result = list(X.design = outmat.x, Y.design = outmat.y, X.candidate = xmat.r, Y.candidate = ymat.r,
Cluster.num = groupid,weight.value = wt)
return(result)
}
Cri_IRSF_cluster <- function(Des) {
xmat = as.matrix(Des[[1]])
ymat = as.matrix(Des[[2]])
Xcand = as.matrix(Des[[3]])
Ycand = as.matrix(Des[[4]])
wt = Des[[6]]
xmat.scale = unitscale(xmat,Xcand)
ymat.scale = unitscale(ymat,Ycand)
qnx = dim(Xcand)[1]
px = dim(xmat)[2]
py = dim(ymat)[2]
qx = dim(xmat)[1]
xcand.scale = unitscale(Xcand,Xcand)
ycand.scale = unitscale(Ycand,Ycand)
X.max = max(as.numeric(lapply(1:qnx, function(i,xmat,xcand){
min(as.numeric(lapply(1:qx, function(j,xmat,p){
stats::dist(as.matrix(rbind(p[1:(px)],xmat[j,1:(px)])))
},xmat = xmat,p = xcand[i,])))
},xcand= xcand.scale,xmat =xmat.scale)))
Y.max = max(as.numeric(lapply(1:qnx, function(i,ymat,ycand){
min(as.numeric(lapply(1:qx, function(j,ymat,p){
stats::dist(as.matrix(rbind(p[1:(py)],ymat[j,1:(py)])))
},ymat = ymat,p = ycand[i,])))
},ycand= ycand.scale,ymat =ymat.scale)))
Xmat1 = as.data.frame(xmat[,1:(px)])
names(Xmat1) = paste("x",c(1:(px)))
Ymat1 = as.data.frame(ymat[,1:(py)])
names(Ymat1) = paste("y",c(1:(py)))
result = list(X.max=X.max,Y.max=Y.max,X.design=Xmat1,Y.design = Ymat1,weight.value = Des[[6]])
return(result)
}
result.3 = irsf.cluster(xmat.r,ymat.cand.est.full,Ns0.ex1,wt[varid],Method = "complete")
result.cri = Cri_IRSF_cluster(result.3)
return(list(X.max=result.cri[[1]],Y.max=result.cri[[2]],weight.x=wt[varid],
X.design = result.cri[[3]],Y.design = result.cri[[4]],Method="complete"))
}
stopCluster(cl)
View(CriterionA)
CriterionA[,1]
as.numerical(CriterionA[,1])
as.numeric(CriterionA[,1])
runApp('D:/Ph.D. preparing/First project - Space filling design/IRSF with clustering method/APP/IRSF clustering.R')
A = read.csv("D:\\Ph.D. preparing\\First project - Space filling design\\FFF\\Cluster APP\\Shiny app test\\Regression model candidate.csv",
header = T)
xmat.r = as.matrix(A[,1:2],ncol=2)
ymat.cand.est.full = as.matrix(A[,3:3],ncol=1)
Ns0.ex1 = 10
wt = seq(0,1,by = 1/50)
iterations <- length(wt)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
CriterionA <- foreach(varid = 1:iterations, .combine = rbind, .packages = c('dplyr','tidyr')) %dopar%
{
source("D:/Ph.D. preparing/First project - Space filling design/IRSF with clustering method/APP/function.R")
result.3 = irsf.cluster(xmat.r,ymat.cand.est.full,Ns0.ex1,wt[varid],Method = "complete")
result.cri = Cri_IRSF_cluster(result.3)
return(data.frame(X.max=result.cri[[1]],Y.max=result.cri[[2]],weight.x=wt[varid],Method="complete"))
}
stopCluster(cl)
runApp('D:/Ph.D. preparing/First project - Space filling design/IRSF with clustering method/APP/IRSF clustering.R')
shiny::runApp()
library(shiny)
library(shinyFeedback)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(scatterplot3d)
library(doParallel)
library(foreach)
library(dplyr)
library(rsconnect)
library(doSNOW)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
